statement-list:		assign (SEMICOLON assign)*

statement:			block
					func-def
					var-def
					assign
					if
					return
					empty

empty:				_

func-def:			datatype IDENTIFIER LPAREN param-list RPAREN statement

param-list:			(datatype IDENTIFIER)*

block:				LBRACE statement-list RBRACE

return:				RETURN assign?

var-def:			datatype IDENTIFIER EQUALS assign

if:					IF LPAREN assign RPAREN statement (ELSE statement)?

assign:				logic-or
					left-side EQUALS assign

logic-or:			logic-xor (LOG_OR logic-xor)*

logic-xor:			logic-and (LOG_XOR logic-and)*

logic-and:			comp-eq (LOG_AND comp-eq)*

comp-eq:			comp-rela ((EE|NE) comp-rela)*

comp-rela:			bit-or ((LT|GT|LTE|GTE) bit-or)*

bit-or:				bit-xor (BIT_OR bit-xor)*

bit-xor:			bit-and (BIT_XOR bit-and)*

bit-and:			bit-shift (BIT_AND bit-shift)*

bit-shift:			math-add ((SHL|SHR|ROTL|ROTR) math-add)*

math-add:			math-mul ((PLUS|MINUS) math-mul)*

math-mul:			unary ((MUL|DIV|MOD) unary)*

unary:				left-side
					(PLUS|MINUS) unary
					LOG_NOT unary
					BIT_NOT unary

left-side:			simple
					// left-side LBRACK assign RBRACK
					func-call

func-call:			left-side LPAREN arg-list RPAREN

arg-list:			assign*
					

simple:				LPAREN assign RPAREN
					INT_LITERAL
					FLOAT_LITERAL
					IDENTIFIER



datatype:			INT
